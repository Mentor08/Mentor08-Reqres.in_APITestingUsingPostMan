{
	"info": {
		"_postman_id": "1dc61836-7523-413b-98b2-38e9f76e3b49",
		"name": "Reqres.in",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28217866",
		"_collection_link": "https://red-shadow-481004.postman.co/workspace/1ba51886-df88-4878-8f55-cd91d7ec9534/collection/28217866-1dc61836-7523-413b-98b2-38e9f76e3b49?action=share&source=collection_link&creator=28217866"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/api/users/2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"pm.test('Content-Type is present', () => {\r",
													"    pm.response.to.have.header('Content-Type');\r",
													"})\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"console.log(response)\r",
													"\r",
													"pm.test('verify id to be 2', () => {\r",
													"    pm.expect(response.data.id).to.eql(2);\r",
													"})\r",
													"\r",
													"pm.test('check the email address', () => {\r",
													"    pm.expect(response.data.email).to.eql(\"janet.weaver@reqres.in\");\r",
													"})\r",
													"\r",
													"pm.test('check the avatar', () => {\r",
													"    pm.expect(response.data.avatar).to.eql(\"https://reqres.in/img/faces/2-image.jpg\");\r",
													"})\r",
													"\r",
													"pm.test('check the first name', () => {\r",
													"    pm.expect(response.data.first_name).to.eql(\"Janet\");\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/api/users/2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"api",
												"users",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "/api/users/2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"pm.test('Content-Type is present', () => {\r",
													"    pm.response.to.have.header('Content-Type');\r",
													"})\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"console.log(response)\r",
													"\r",
													"pm.test('Verify the name', () => {\r",
													"    pm.expect(response.name).to.eql(\"morpheus\");\r",
													"})\r",
													"\r",
													"pm.test(\"Verify the job title\", () => {\r",
													"    pm.expect(response.job).to.eql(\"zion resident\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/api/users/2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"api",
												"users",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "/api/users/2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"pm.test('Content-Type is present', () => {\r",
													"    pm.response.to.have.header('Content-Type');\r",
													"})\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"console.log(response)\r",
													"\r",
													"pm.test('Verify the name', () => {\r",
													"    pm.expect(response.name).to.eql(\"morpheus\");\r",
													"})\r",
													"\r",
													"pm.test(\"Verify the job title\", () => {\r",
													"    pm.expect(response.job).to.eql(\"zion resident\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/api/users/2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"api",
												"users",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "/api/users/2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 204', () => {\r",
													"    pm.response.to.have.status(204);\r",
													"})\r",
													"\r",
													"pm.test('Date is present', () => {\r",
													"    pm.response.to.have.header('Date');\r",
													"})\r",
													"\r",
													"pm.test(\"Status code name has string\", () => {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/api/users/2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"api",
												"users",
												"2"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "/api/users?page=2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Content-Type is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"console.log(response)\r",
											"\r",
											"pm.test('verify page number to be 2', () => {\r",
											"    pm.expect(response.page).to.eql(2);\r",
											"})\r",
											"\r",
											"pm.test('Total number of users in page 2 should be 6', () => {\r",
											"    pm.expect(response.data.length).to.eql(6);\r",
											"})\r",
											"\r",
											"pm.test(\"check the email of each user to include reqres.in\", () => {\r",
											"    response.data.map(user => {\r",
											"        console.log(\"User\" +\" \" +user.id +\" \"+ \"email is \" + user.email);\r",
											"        pm.expect(user.email).to.includes(\"reqres.in\")\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"check the email of each user\", () => {\r",
											"    response.data.map(user => {\r",
											"        pm.expect(user.email).to.eql(user.email)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/users?page=2",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"})\r",
											"\r",
											"pm.test('Content-Type is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"console.log(response)\r",
											"\r",
											"pm.test('verify id to be present ', () => {\r",
											"    pm.expect(response.id).to.exist;\r",
											"})\r",
											"\r",
											"pm.test('verify name of the user', () => {\r",
											"    pm.expect(response.name).to.eql(\"morpheus\");\r",
											"})\r",
											"\r",
											"pm.test('verify job of the user', () => {\r",
											"    pm.expect(response.job).to.eql(\"leader\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/api/users",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/users?delay=3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Content-Type is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is more than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"console.log(response)\r",
											"\r",
											"pm.test('verify page number to be 1', () => {\r",
											"    pm.expect(response.page).to.eql(1);\r",
											"})\r",
											"\r",
											"pm.test('Total number of users in page 1 should be 6', () => {\r",
											"    pm.expect(response.data.length).to.eql(6);\r",
											"})\r",
											"\r",
											"pm.test(\"check the email of each user to include reqres.in\", () => {\r",
											"    response.data.map(user => {\r",
											"        console.log(\"User\" +\" \" +user.id +\" \"+ \"email is \" + user.email);\r",
											"        pm.expect(user.email).to.includes(\"reqres.in\")\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"check the email of each user\", () => {\r",
											"    response.data.map(user => {\r",
											"        pm.expect(user.email).to.eql(user.email)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/users?delay=3",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "delay",
											"value": "3"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unknown",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/api/unknown/2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"pm.test('Content-Type is present', () => {\r",
													"    pm.response.to.have.header('Content-Type');\r",
													"})\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"console.log(response)\r",
													"\r",
													"pm.test('verify id to be 2', () => {\r",
													"    pm.expect(response.data.id).to.eql(2);\r",
													"})\r",
													"\r",
													"pm.test('check the name', () => {\r",
													"    pm.expect(response.data.name).to.eql(\"fuchsia rose\");\r",
													"})\r",
													"\r",
													"pm.test('check the year', () => {\r",
													"    pm.expect(response.data.year).to.eql(2001);\r",
													"})\r",
													"\r",
													"pm.test('check the color name', () => {\r",
													"    pm.expect(response.data.color).to.eql(\"#C74375\");\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/api/unknown/2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"api",
												"unknown",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "/api/unknown/2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"pm.test('Content-Type is present', () => {\r",
													"    pm.response.to.have.header('Content-Type');\r",
													"})\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"console.log(response)\r",
													"\r",
													"pm.test('Verify the name', () => {\r",
													"    pm.expect(response.name).to.eql(\"fuchsia rose\");\r",
													"})\r",
													"\r",
													"pm.test(\"Verify the year\", () => {\r",
													"    pm.expect(response.year).to.eql(\"2005\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"fuchsia rose\",\r\n    \"year\": \"2005\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/api/unknown/2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"api",
												"unknown",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "/api/unknown/2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 204', () => {\r",
													"    pm.response.to.have.status(204);\r",
													"})\r",
													"\r",
													"pm.test('Date is present', () => {\r",
													"    pm.response.to.have.header('Date');\r",
													"})\r",
													"\r",
													"pm.test(\"Status code name has string\", () => {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/api/unknown/2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"api",
												"unknown",
												"2"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "/api/unknown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Content-Type is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"comfirm the page number to be 1\", () => {\r",
											"pm.expect(response.page).to.eql(1)\r",
											"})\r",
											"\r",
											"pm.test(\"comfirm the length of users to be 6\", () => {\r",
											"pm.expect(response.data.length).to.eql(6)\r",
											"})\r",
											"\r",
											"pm.test(\"check the name of each user\", () => {\r",
											"    response.data.map((user) => {\r",
											"        console.log(\"User\" +\" \" + user.id +\" \"+ \"name is \" + user.name);\r",
											"        pm.expect(user.name).to.eql(user.name);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/api/unknown",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"unknown"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Register",
					"item": [
						{
							"name": "/api/register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Content-Type is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"console.log(response)\r",
											"\r",
											"pm.test('verify id to be 4', () => {\r",
											"    pm.expect(response.id).to.eql(4);\r",
											"})\r",
											"\r",
											"pm.test(\"verify response body to contain token\", () => {\r",
											"    pm.expect(response.token).to.exist;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/api/register",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Register - Unsuccessful",
					"item": [
						{
							"name": "/api/register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Content-Type is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"verify response body to contain error\", () => {\r",
											"    pm.expect(response.error).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"verify the error message\", () => {\r",
											"    pm.expect(response.error).to.eql(\"Missing password\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/api/register",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "/api/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Content-Type is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"verify response body to contain token\", () => {\r",
											"    pm.expect(response.token).to.exist;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/api/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login - Unsuccessful",
					"item": [
						{
							"name": "/api/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Content-Type is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"verify response body to contain error\", () => {\r",
											"    pm.expect(response.error).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"verify the error message\", () => {\r",
											"    pm.expect(response.error).to.eql(\"Missing password\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/api/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://reqres.in"
		},
		{
			"key": "token",
			"value": "QpwL5tke4Pnpja7X4"
		}
	]
}